Here’s a step-by-step guide to create a table with string, integer, and date columns in Impala, and then insert data into it.

Step 1: Create the Table

CREATE TABLE sales_partitioned (
    order_id INT,                  -- Integer column
    sale_amount INT,               -- Integer column
    customer_name STRING,          -- String column
    sale_date DATE                 -- Date column
)
PARTITIONED BY (sale_category STRING) -- Partition column as a string
STORED AS PARQUET;

Step 2: Insert Data into the Table

You can insert data into the table manually. Here’s an example:

-- Insert data into the table for different partitions
INSERT INTO sales_partitioned PARTITION (sale_category='low_sales') VALUES (1, 45, 'Alice', '2024-01-01');
INSERT INTO sales_partitioned PARTITION (sale_category='low_sales') VALUES (2, 85, 'Bob', '2024-01-05');
INSERT INTO sales_partitioned PARTITION (sale_category='medium_sales') VALUES (3, 150, 'Charlie', '2024-01-10');
INSERT INTO sales_partitioned PARTITION (sale_category='medium_sales') VALUES (4, 300, 'David', '2024-01-15');
INSERT INTO sales_partitioned PARTITION (sale_category='high_sales') VALUES (5, 450, 'Eve', '2024-01-20');
INSERT INTO sales_partitioned PARTITION (sale_category='high_sales') VALUES (6, 700, 'Frank', '2024-01-25');
INSERT INTO sales_partitioned PARTITION (sale_category='premium_sales') VALUES (7, 850, 'Grace', '2024-02-01');
INSERT INTO sales_partitioned PARTITION (sale_category='premium_sales') VALUES (8, 1100, 'Hannah', '2024-02-10');
INSERT INTO sales_partitioned PARTITION (sale_category='luxury_sales') VALUES (9, 1250, 'Ivy', '2024-02-15');
INSERT INTO sales_partitioned PARTITION (sale_category='luxury_sales') VALUES (10, 1500, 'Jack', '2024-02-20');

Step 3: Validate Table Structure and Data

	1.	Describe the Table Schema:

DESCRIBE sales_partitioned;


	2.	Show Partitions:

SHOW PARTITIONS sales_partitioned;


	3.	Query Data from a Specific Partition:

SELECT * FROM sales_partitioned WHERE sale_category = 'medium_sales';

Explanation of the Table

	•	Columns:
	•	order_id and sale_amount are integers.
	•	customer_name is a string.
	•	sale_date is a date.
	•	Partition Column:
	•	sale_category is a string and used to partition the table into logical categories like low_sales, medium_sales, etc.
	•	Storage:
	•	The table is stored in Parquet format for better performance.

Sample Query Output

For SELECT * FROM sales_partitioned WHERE sale_category = 'medium_sales':

order_id	sale_amount	customer_name	sale_date	sale_category
3	150	Charlie	2024-01-10	medium_sales
4	300	David	2024-01-15	medium_sales

This setup allows you to handle string, integer, and date data types efficiently with partitioning. Let me know if you need further assistance!
