#!/bin/bash

# Prompt for source table name
echo -n "Enter the source table name (schema.table): "
read source_table

# Validate input
if [ -z "$source_table" ]; then
    echo "Table name cannot be empty."
    exit 1
fi

# Define new table name
new_table="${source_table}_new_"

# Extract the schema and table name
schema_name=$(echo "$source_table" | cut -d '.' -f1)
table_name=$(echo "$source_table" | cut -d '.' -f2)

# Fetch partition columns dynamically using SHOW CREATE TABLE
partition_columns=$(impala-shell -B -q "SHOW CREATE TABLE $source_table" 2>/dev/null | \
awk '/PARTITIONED BY/,/TBLPROPERTIES/' | grep -v 'TBLPROPERTIES' | sed 's/PARTITIONED BY//;s/)//;s/(//;s/,//g' | tr '\n' ',' | sed 's/,$//')

# Check if partition columns were found
if [ -z "$partition_columns" ]; then
    echo "No partitions found. Proceeding without partitions."
    partition_clause=""
else
    echo "Partition columns found: $partition_columns"
    partition_clause="PARTITIONED BY ($partition_columns)"
fi

# Run the CTAS query with Iceberg
echo "Creating new Iceberg table: $new_table"

impala-shell -i <impala_host>:21000 --ssl -q "
CREATE TABLE $new_table
STORED AS ICEBERG
$partition_clause
TBLPROPERTIES (
    'format-version' = '2',
    'parquet_annotate_strings_utf8' = 'true'
)
AS
SELECT *
FROM $source_table;
"

# Check status
if [ $? -eq 0 ]; then
    echo "Table $new_table created successfully with data from $source_table."
else
    echo "Failed to create the new table."
    exit 1
fi
